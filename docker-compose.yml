version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: farmguard-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - .env.local
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - farmguard-network

  # Development server (alternative to production build)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: farmguard-app-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - .env.local
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - farmguard-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: farmguard-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - farmguard-network

  # PostgreSQL database (for future use)
  postgres:
    image: postgres:15-alpine
    container_name: farmguard-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=farmguard
      - POSTGRES_USER=farmguard
      - POSTGRES_PASSWORD=farmguard_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    profiles:
      - database
    networks:
      - farmguard-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: farmguard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production
    networks:
      - farmguard-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: farmguard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - farmguard-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: farmguard-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - farmguard-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  farmguard-network:
    driver: bridge